from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import os

TOKEN = os.getenv("BOT_TOKEN")

stores = ["–ì—É–±–∫–∏–Ω–∞", "–û—Å—Ç—Ä–æ–≤—Å–∫–æ–≥–æ", "–õ–µ–Ω–∏–Ω–∞", "–ë–æ—á–∫–∞—Ä–µ–≤–∞"]
big_cakes = ["–°–Ω–∏–∫–µ—Ä—Å", "–®–æ–∫–æ–±–∞–Ω", "–ë–∞—Ä—Ö–∞—Ç", "–õ–µ—Å", "–ì–µ–Ω–µ—Ä–∞–ª—å—Å–∫–∏–π", "–ö–∞—Ä–∞–±–∞–Ω", "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π", "–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π", "–ê—Ä–∞—Ö–∏—Å–æ–≤—ã–π –≤–∑—Ä—ã–≤"]
small_cakes = ["–°–Ω–∏–∫–µ—Ä—Å", "–®–æ–∫–æ–±–∞–Ω", "–õ–µ—Å", "–ì–µ–Ω–µ—Ä–∞–ª—å—Å–∫–∏–π", "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π"]
target_stock = 2

inventory = {store: {"–±–æ–ª—å—à–∏–µ": {}, "–º–∞–ª–µ–Ω—å–∫–∏–µ": {}} for store in stores}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥—ã:\n'
        '/–æ—Å—Ç–∞—Ç–∫–∏ [–º–∞–≥–∞–∑–∏–Ω] [—Ä–∞–∑–º–µ—Ä] [—Ç–æ—Ä—Ç] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]\n'
        '/–ø–æ–∫–∞–∑–∞—Ç—å ‚Äî –æ—Å—Ç–∞—Ç–∫–∏\n'
        '/–∑–∞–∫–∞–∑ ‚Äî –æ–±—â–∏–π –∑–∞–∫–∞–∑'
    )

async def update_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 4:
        await update.message.reply_text('–ü—Ä–∏–º–µ—Ä: /–æ—Å—Ç–∞—Ç–∫–∏ –ì—É–±–∫–∏–Ω–∞ –±–æ–ª—å—à–∏–µ –°–Ω–∏–∫–µ—Ä—Å 1')
        return

    store, size, cake, qty_str = context.args[0], context.args[1].lower(), context.args[2], context.args[3]

    if store not in stores or size not in ["–±–æ–ª—å—à–∏–µ", "–º–∞–ª–µ–Ω—å–∫–∏–µ"]:
        await update.message.reply_text('–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.')
        return
    if size == "–±–æ–ª—å—à–∏–µ" and cake not in big_cakes:
        await update.message.reply_text('–¢–∞–∫–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ç–æ—Ä—Ç–∞ –Ω–µ—Ç.')
        return
    if size == "–º–∞–ª–µ–Ω—å–∫–∏–µ" and cake not in small_cakes:
        await update.message.reply_text('–¢–∞–∫–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ç–æ—Ä—Ç–∞ –Ω–µ—Ç.')
        return

    try:
        qty = int(qty_str)
    except ValueError:
        await update.message.reply_text('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
        return

    inventory[store][size][cake] = qty
    need = max(0, target_stock - qty)
    await update.message.reply_text(f'{store}, {size} {cake}: {qty} —à—Ç. –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å: {need} —à—Ç.')

async def show_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "–°–≤–æ–¥–∫–∞:\n"
    for store in stores:
        msg += f'\nüõí {store}:\n  –ë–æ–ª—å—à–∏–µ:\n'
        for cake in big_cakes:
            qty = inventory[store]["–±–æ–ª—å—à–∏–µ"].get(cake, 0)
            need = max(0, target_stock - qty)
            msg += f'    {cake}: {qty} (–ù—É–∂–Ω–æ: {need})\n'
        msg += "  –ú–∞–ª–µ–Ω—å–∫–∏–µ:\n"
        for cake in small_cakes:
            qty = inventory[store]["–º–∞–ª–µ–Ω—å–∫–∏–µ"].get(cake, 0)
            need = max(0, target_stock - qty)
            msg += f'    {cake}: {qty} (–ù—É–∂–Ω–æ: {need})\n'
    await update.message.reply_text(msg)

async def total_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total_big = {cake: 0 for cake in big_cakes}
    total_small = {cake: 0 for cake in small_cakes}

    for store in stores:
        for cake in big_cakes:
            qty = inventory[store]["–±–æ–ª—å—à–∏–µ"].get(cake, 0)
            total_big[cake] += max(0, target_stock - qty)
        for cake in small_cakes:
            qty = inventory[store]["–º–∞–ª–µ–Ω—å–∫–∏–µ"].get(cake, 0)
            total_small[cake] += max(0, target_stock - qty)

    msg = "–û–±—â–∏–π –∑–∞–∫–∞–∑:\n–ë–æ–ª—å—à–∏–µ —Ç–æ—Ä—Ç—ã:\n"
    for cake, need in total_big.items():
        msg += f'  {cake}: {need} —à—Ç.\n'
    msg += "\n–ú–∞–ª–µ–Ω—å–∫–∏–µ —Ç–æ—Ä—Ç—ã:\n"
    for cake, need in total_small.items():
        msg += f'  {cake}: {need} —à—Ç.\n'

    await update.message.reply_text(msg)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stock", update_inventory))
    app.add_handler(CommandHandler("show", show_inventory))
    app.add_handler(CommandHandler("order", total_order))
    app.run_polling()

if __name__ == '__main__':
    main()
